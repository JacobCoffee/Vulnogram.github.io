const storage={};destroySession=(()=>{"creds"in storage&&delete storage.creds}),setSessionTimer=(()=>{setTimeout(destroySession,36e5)}),setCredentials=(creds=>{storage.creds=creds,setSessionTimer()}),clientReply=((e,msg)=>{e.ports[0].postMessage(msg)}),checkSession=(e=>"creds"in storage||(clientReply(e,{error:"Not logged in."}),!1)),defaultOpts=(()=>({headers:{"content-type":"application/json","CVE-API-KEY":storage.creds.key,"CVE-API-ORG":storage.creds.org,"CVE-API-USER":storage.creds.user}})),getURL=((path,query)=>{let url=new URL(`/api/${path}`,storage.serviceUri);if(query)for(const[k,v]of Object.entries(query))url.searchParams.append(k,v);return url.toString()}),doFetch=((event,url,opts)=>fetch(url,opts).then(res=>{res.ok?res.json().then(data=>clientReply(event,{data:data})):clientReply(event,{error:res.status})}).catch(err=>{clientReply(event,{error:err})})),requestService=(event=>{let{query:query,path:path,method:method}=event.data,opts=defaultOpts(),url=getURL(path,query);return["PUT","POST"].includes(method)&&(opts.method=method,"body"in event.data&&(opts.body=JSON.stringify(event.data.body))),doFetch(event,url,opts)}),self.onmessage=(e=>{switch(e.data.type){case"init":"serviceUri"in e.data&&(storage.serviceUri=e.data.serviceUri,clientReply(e,{data:"ok"}));break;case"echo":clientReply(e,{data:"echo"});break;case"login":setCredentials(e.data.creds),clientReply(e,{data:"ok"});break;case"request":checkSession(e)&&requestService(e);break;case"getOrg":checkSession(e)&&clientReply(e,{data:storage.creds.org});break;default:clientReply(e,{error:"Not supported"})}});